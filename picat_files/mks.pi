% Static planner for multi-agent path finding for grid maps and the makespan objective
% using train motion on agents
% swap is forbidden
% variables At + Pass

import sat.
import problem.

main([ProblemInstanceFile]) =>
    load(ProblemInstanceFile),
    ProblemInstance =  getProblemInstance(),
    Plans = find_plans(ProblemInstance),
    output(Plans).

find_plans(Problem) = Plans =>
    LB = Problem.mks_LB(),
    MAX_LEN = max_len(classic),
    EdgesNumber = Problem.create_edges(),
    member(Makespan, LB..MAX_LEN),

    printf("building"),
    time(Plans = create_clause(Problem, Makespan, EdgesNumber)),

    printf("solving"),
    %time(solve([$nvars(NVars),$ncls(NCls)],Plans)),
    time(solve(Plans)),
    NVars = 0,
    NCls = 0,
    printf("vars %d\n", NVars),
    printf("clauses %d\n\n", NCls).

create_clause(Problem, Makespan, EdgesNumber) = B =>
    AgentsNumber = Problem.agents_count(),
    VerticesNumber = Problem.vertices_count(),
    Dist = Problem.distances(),

    B = new_array(Makespan,AgentsNumber,VerticesNumber), 
    C = new_array(Makespan-1,AgentsNumber,EdgesNumber),
    B::0..1,
    C::0..1,

    foreach (Agent in Problem.agents)
        A = Agent.agentID,

        % Initial positions
        Start = Agent.initial,
        B[1,A,Start] = 1,

        % Target positions
        Goal = Agent.target,
        B[Makespan,A,Goal] = 1,

        preprocess_forward(A, Dist[A].distance_from_start(), B),
        preprocess_backward(A, Dist[A].distance_from_goal(), B),
        preprocess_edges(A,Problem.vertices,B,C)
    end,

    % Each agent occupies up to one vertex at each time.
    foreach (T in 1..Makespan, A in 1..AgentsNumber)
        sum([B[T,A,V] : V in 1..VerticesNumber]) #=< 1
    end,

    % No two agents occupy the same vertex at any time.
    foreach(T in 1..Makespan, V in 1..VerticesNumber) 
        sum([B[T,A,V] : A in 1..AgentsNumber]) #=< 1   
    end,

    % if an edge is used in one direction, it can not be used in the other direction (no swap)
    foreach(T in 1..Makespan-1, EID in 1..EdgesNumber) 
        edgeid(EID, U, V),
    	edge(OppositeEID, V, U),
        EList = remove_dups([EID,OppositeEID]),
    	sum([C[T,A,W] : A in 1..AgentsNumber, W in EList]) #=< 1   
    end,

    % if an agent is in a node, it needs to move through one of the edges from that node
    foreach(T in 1..Makespan-1, A in 1..AgentsNumber, Vertex in Problem.vertices()) 
    	EList = Vertex.out_edges(),
        B[T,A,Vertex.vertexID] #=> sum([C[T,A,W] : W in EList]) #= 1
    end,

    % if agent is using an edge, it must arrive to the connected node in next timestep
    foreach(T in 1..Makespan-1, A in 1..AgentsNumber, EID in 1..EdgesNumber) 
        edgeid(EID,_,V),
        C[T,A,EID] #=> B[T+1,A,V] #= 1
    end.
