% vertices = splitted into 4
% action_lengths = equal
% robustness = 1

import sat.
import problem.

main([ProblemInstanceFile]) =>
    load(ProblemInstanceFile),
    ProblemInstance =  getProblemInstance(),
    Plans = find_plans(ProblemInstance),
    output_split(Plans).

find_plans(Problem) = Plans =>
    LB = Problem.mks_LB(),
    MAX_LEN = max_len(split),
    member(Makespan, LB..MAX_LEN),

    printf("building"),
    time(Plans = create_clause(Problem, Makespan)),

    printf("solving"),
    %time(solve([$nvars(NVars), $ncls(NCls)],Plans)),
    time(solve([],Plans)),
    NVars = 0,
    NCls = 0,
    printf("vars %d\n", NVars),
    printf("clauses %d\n\n", NCls).

create_clause(Problem, Makespan) = B =>
    AgentsNumber = Problem.agents_count(),
    VerticesNumber = Problem.vertices_count(),
    Dist = Problem.distances(),

    B = new_array(Makespan+1,AgentsNumber,VerticesNumber,4), % each vertex is splited into 4
    B::0..1,

    foreach (Agent in Problem.agents)
        A = Agent.agentID,

        % Initial positions
        I = Agent.initial,
        B[1,A,I,1] = 1,

        % Pick up positions - each position is visited at least once by some agent
        P = Agent.pickup,
        sum([B[M,A,P,D] : D in 1..4, M in 1..Makespan+1]) #>= 1,

        % Target positions - each target position is occupied by an agent
        T = Agent.target,
        sum([B[Makespan+1,A,T,D] : D in 1..4]) #>= 1,

        preprocess_forward_split(A, Dist[A].distance_from_start(), B),
        preprocess_backward_split(A, Dist[A].distance_from_start(), B)
    end,

    % Each agent occupies exactly one vertex at each time
    foreach (Agent in 1..AgentsNumber, Time in 1..Makespan+1)
        sum([B[Time,Agent,V,D] : V in 1..Problem.vertices_count(), D in 1..4]) #= 1
    end,

    % No two agents occupy same vertex
    foreach (Time in 1..Makespan+1, V in 1..Problem.vertices_count())
        sum([B[Time,Agent,V,D] : Agent in 1..AgentsNumber, D in 1..4]) #<= 1
    end,

    % Only transitions to adjacent free vertices are allowed
    foreach (Time in 1..Makespan, Agent in 1..AgentsNumber, Vertex in Problem.vertices(), D in 1..4)
        % Agent can move only to adjacent vertex in its direction, change direction or do nothing
        V = Vertex.vertexID(),
        NV = Vertex.neighbour(D),
        if(NV !== 0) then
            B[Time,Agent,V,D] #=>
                (B[Time+1,Agent,NV,D] + sum([B[Time+1,Agent,V,NewRotation] : NewRotation in getRotation(D)])) #= 1
        else
            B[Time,Agent,V,D] #=>
                sum([B[Time+1,Agent,V,NewRotation] : NewRotation in getRotation(D)]) #= 1
        end,
        
    end,
    
    % ROBUSTNESS: For each position of each agent at each time, there was not another agent in time-1
    K = 1, %robustness constant
    foreach (Time in (1+K)..Makespan+1, Agent in 1..AgentsNumber, Vertex in Problem.vertices(), D in 1..4)
        V = Vertex.vertexID(),
        B[Time,Agent,V,D] #=>
                sum([B[Time-I,A,V,DN] : I in 1..K, A in 1..Agent, A != Agent, DN in 1..4]) #= 0,
    end.
